#!/bin/bash
# Unit tests for functions.sh: getting information about repos

oneTimeSetUp()
{
	REPOCONFIG="$(pwd)/functions_ReposTests.config"
	FWMETAREPO=xyz
	. ../functions.sh
}

testGetAllRepos()
{
	assertEquals "Got wrong list of repos." "repo1 repo2 repo3 repo4" "$(getAllRepos)"
}

testGetAllReposForPlatform()
{
	OSTYPE="linux-gnu"
	assertEquals "Got wrong list of repos." "repo1 repo2 repo4" "$(getAllReposForPlatform)"
}

testGetDirForRepo()
{
	assertEquals "Got wrong directory." "dir1/dir3" "$(getDirForRepo "repo3")"
}

testGetUrlForRepo_default()
{
	assertEquals "Got wrong URL" "git://example.com/myrepos/repo2.git" "$(getUrlForRepo "repo2")"
}

testGetUrlForRepo_other()
{
	assertEquals "Got wrong URL" "ssh://other.example.com/winrepo" "$(getUrlForRepo "repo3")"
}

testIsModule_Module()
{
	assertTrue "Didn't detect module" "__isModule repo4"
}

testIsModule_NoModule()
{
	assertFalse "Wrongly detected module" "__isModule repo3"
}

testIncluded_NoModule()
{
	assertTrue "Didn't include repo" "__included repo3"
}

testIncluded_ModuleIncluded()
{
	assertTrue "Didn't include repo" "__included repo4"
}

testIncluded_ModuleNotIncluded()
{
	assertFalse "Did include repo" "__included repo5"
}

testIncluded_InvisibleModule()
{
	assertTrue "Didn't include invisible module" "__included repo7"
}

testIncluded_NotIncludedInvisibleModule()
{
	assertFalse "Did include unincluded invisible module" "__included repo6"
}

testIsVisible_Visible()
{
	assertTrue "Repo wasn't detected as being visible" "__isVisible repo5"
}

testIsVisible_NoSubmodule()
{
	assertTrue "Repo wasn't detected as being visible" "__isVisible repo3"
}

testIsVisible_Invisible()
{
	assertFalse "Repo was detected as being visible" "__isVisible repo6"
}

testInitSubmodule_Default()
{
	assertFalse "Wrong default value" "__isInitSubmodule repo6"
}

testInitSubmodule_InitTrue()
{
	assertTrue "__isInitSubmodule repo4"
}

testInitSubmodule_InitFalse()
{
	assertFalse "__isInitSubmodule repo5"
}

testGetParentRepo_Submodule()
{
	assertEquals "Found wrong parent repo" "repo4" "$(getParentRepo "repo7")"
}

testGetParentRepo_NoModule()
{
	assertEquals "Found wrong parent repo" "repo3" "$(getParentRepo "repo3")"
}

testGetRepoForDir()
{
	assertEquals "Didn't find repo for directory" "repo4" "$(getRepoForDir "dir1/dir4")"
}

testGetRepoForDir_FwMeta()
{
	assertEquals "Didn't find repo for directory" "xyz" "$(getRepoForDir ".")"
}

testGetRepoForDir_NonExisting()
{
	assertNull "Found a repo for directory outside of any repo" "$(getRepoForDir /tmp)"
}

. shunit2/shunit2
