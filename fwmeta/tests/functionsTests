#!/bin/bash
# Unit tests for functions.sh

oneTimeSetUp()
{
	. ../functions.sh

	dir=$(pwd)
	tmpdir=$(mktempdir)
	cd $tmpdir
	git init -q functionTests
	cd $tmpdir/functionTests
	touch fileA
	git add fileA
	git commit -q -m "Initial commit"
	git checkout -q -b develop
	touch fileB
	git add fileB
	git commit -q -m "Second commit"
	echo "Some text" >> fileB
	git commit -q -a -m "Third commit"
	cd $dir
}

oneTimeTearDown()
{
	cd $HOME
	rm -rf $tmpdir
}

tearDown()
{
	cd $tmpdir/functionTests
	git reset --hard -q
	cd $dir
}

testCurrentBranch_develop()
{
	cd $tmpdir/functionTests
	git checkout -q develop
	assertEquals "Didn't detect correct branch." "develop" "$(currentBranch)"
	cd $dir
}

testCurrentBranch_NoBranch()
{
	cd $tmpdir/functionTests
	git checkout -q develop^
	assertEquals "Didn't detect correct branch." "(no branch)" "$(currentBranch)"
	cd $dir
}

testCurrentCommit_Branch()
{
	cd $tmpdir/functionTests
	git checkout -q develop
	assertEquals "Didn't detect correct commit." "develop" "$(currentCommit)"
	cd $dir
}

testCurrentCommit_NoBranch()
{
	cd $tmpdir/functionTests
	git checkout -q develop^
	assertEquals "Didn't detect correct commit." "develop~1" "$(currentCommit)"
	cd $dir
}

testIsDirty_Clean()
{
	cd $tmpdir/functionTests
	assertFalse "Didn't detect that working directory is clean"  "__isDirty"
	cd $dir
}

testIsDirty_Dirty()
{
	cd $tmpdir/functionTests
	touch testIsDirty.txt && git add testIsDirty.txt
	assertTrue "Didn't detect that working directory is dirty" "__isDirty"
	cd $dir
}

testGetParentBranch()
{
	cd $tmpdir/functionTests
	git branch release/123 &>/dev/null
	git checkout -q --track -b feature/abc release/123 &>/dev/null
	git checkout -q develop
	assertTrue "Failed in call to getParentBranch" "getParentBranch feature/abc"
	assertEquals "Didn't extract parent" "release/123" "$(getParentBranch feature/abc)"
}

. shunit2/shunit2
