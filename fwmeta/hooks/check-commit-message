#!/bin/bash
# commit-msg hook
#
# Gets called by git with the name of the file that holds the commit message
# This script checks that the commit message is formatted according to the standard:
# - First line:      no more than 62 chars and not ending with period (or if it is the
#                    only line: no more than 70 chars)
# - Second line:     empty
# - Following lines: no more than 70 chars

FIRSTLINE_LEN=62
LINE_LEN=70
ERRORHEADER="[POLICY] Your commit message is not formatted correctly."

OutputError()
{
	echo $ERRORHEADER
	echo $1
	exit $2
}

# git strips trailing whitespace in the commit message prior to calling this hook
COUNT=0
cat "$1" | grep --invert-match -E "^#" | while read LINE
do
	COUNT=$((COUNT + 1))
	LEN=$(echo "$LINE" | tr -d "\r\n" | wc -c) # don't count \r\n
	case "$COUNT" in
		1)
			if [ $(cat "$1" | sed '/^Change-Id: /d;/^\s*$/d' | wc -l) -gt 1 ]; then
				THIS_LINE_LEN=$FIRSTLINE_LEN
				MSG="The first line (subject) should be no more than $FIRSTLINE_LEN characters."
			else
				THIS_LINE_LEN=$LINE_LEN
				MSG="The first line (subject) should be no more than $LINE_LEN characters if it is the only line."
			fi
			if [ $LEN -gt $THIS_LINE_LEN ]; then
				OutputError "$MSG" 1
			elif [ "${LINE:$LEN-1}" = "." ]; then
				OutputError "The first line (subject) should not end with a period." 2
			fi
			;;
		2)
			if [ $LEN -gt 0 ]; then
				OutputError "The second line should be empty." 3
			fi
			;;
		*)
			if [ $LEN -gt $LINE_LEN ]; then
				OutputError "Subsequent lines (body) should be no more than $LINE_LEN characters." 4
			fi
			;;
	esac
done
