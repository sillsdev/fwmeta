#!/bin/bash
# Initializes and clones git repos needed for FW development

set -e

[ -f "$(dirname "$0")/defs.sh" ] && . "$(dirname "$0")/defs.sh"

# Version of the alias section in the config file. Increment the number each time you make some
# changes to setting the alias/guitool section below so that the config gets updated when this
# script is run.
THISALIASVERSION=19

# Display help
help()
{
echo -e "Usage:\
\n    $(basename "$0") [options]

Options:\
\n    -r,--reset\
\n         Reset repo by asking all questions and performing all\
\n         initializations again.
\n    -m,--modify\
\n         Allow changing the selection of repos and branches.\
\n         Note: this doesn't delete any repos or branches.
\n    -h,--help\
\n         Display this help screen.
\n    -v,--version\
\n         Display the version number.
\n    --shallow\
\n         Clone repositories without history.
\n    --basedir <path>\
\n         Path to the toplevel directory of the fwmeta repo.\
\n         Mainly used internally.
\n    --debug\
\n         Output debug information.\
\n"
}

# Display version number
showVersion()
{
	basedir="$(getfwmetadirBootStrap)"
	debug "basedir=$basedir"
	cd "$basedir"
	echo "$(basename "$0") $(git describe --dirty)"
}

debug()
{
	[ $DEBUG ] && echo -e "$@"
	return 0
}

# Get the directory of the fwmeta repo. We can't do that in functions.sh because we need to
# know the directory before we can include functions.sh!
getfwmetadirBootStrap()
{
	local dir olddir curdir
	curdir=$(pwd)
	dir=$curdir

	while true; do
		cd $dir
		dir=$(git rev-parse --show-toplevel 2> /dev/null)
		if [ -z $dir ]; then
			echo "$curdir"
			return
		fi
		cd $dir
		if [ -d $TOOLSDIR ] && git config --file .git/config --get fwinit.initialized >/dev/null; then
			echo "$dir"
			return
		else
			olddir="$dir"
			dir=$(dirname "$dir")
			if [ "$olddir" = "$dir" ]; then
				echo "$curdir"
				return
			fi
		fi
	done
}

# Clone the repo $1
# Parameters:
# $1 repo name
# $2 directory where $repo is located on local disc
clonerepo()
{
	local repo loc

	repo=$1
	loc="$2"

	git init "$loc"
	cd "$loc"

	# Initialize origin
	if [ "$reset" = "1" ] || ! git remote | grep -q origin; then
		repouri="$(getUrlForRepo $repo)"
		git remote rm origin 2>/dev/null || true
		git remote add origin "$repouri"
	fi

	# setup push URL
	if [ "$reset" = "1" ] || \
		! git config --get-all remote.origin.pushurl | grep -q "ssh://$gerritusername@$GERRIT:$GERRITPORT/$repo.git"; then
		git remote set-url --push origin "ssh://$gerritusername@$GERRIT:$GERRITPORT/$repo.git"
	fi

	if [ "$reset" = "1" ]; then
		git config --unset fwinit.initialized || true
		git config --unset fwinit.aliasversion || true
	fi

	# update settings for notes
	git config notes.rewrite.amend true
	git config notes.rewrite.rebase true
	git config notes.rewriteRef "refs/notes/*"
	git config notes.displayRef "refs/notes/*"
	git config --add remote.origin.fetch "+refs/notes/*:refs/notes/*"

	# Remove all fetch and push statements for origin so that we can add them again
	git config --unset-all remote.origin.fetch || true
	git config --unset-all remote.origin.push  || true

	# fetch branches and setup tracking branch
	set -f # Disable filename expansion (globbing) in case any branch names contain wildcards
	for branch in $branchlist; do
		# only add existing branches
		if [ $(git ls-remote origin refs/heads/$branch | wc -l) -gt 0 ]; then
			git config --get remote.origin.fetch $branch > /dev/null || git config --add remote.origin.fetch "+refs/heads/$branch:refs/remotes/origin/$branch"
			git config --get remote.origin.push $branch > /dev/null || git config --add remote.origin.push "+refs/heads/$branch:refs/for/$branch"
			git config branch.$branch.rebase true
			git config branch.$branch.remote origin
			git config branch.$branch.merge refs/heads/$branch
		fi
	done
	set +f # Re-enable filename expansion
	git fetch $shallow -p origin

	# we need the master and develop branches
	if ! git branch | grep -q master; then
		git checkout -q -t origin/master
	fi
	if ! git branch | grep -q develop; then
		git checkout -q -t origin/develop
	fi
}

# Initialize git repo $1.
# Parameters:
# $1 repo name
# $2 directory where $repo is located on local disc
# $3 top level directory that contains $TOOLSDIR subdirectory
initrepo()
{
	local repo loc basedir parent parentDir cwd locRelative initialized

	repo=$1
	loc="$2"
	basedir="$3"

	cwd=$(pwd)
	initialized=false

	debug "Processing $repo"

	if ! repolistIncludes "$repo" && __isVisible $repo && [ "$repo" != "$FWMETAREPO" ]; then
		debug "$repo not included in repolist from user, skipping"
		return 0
	fi

	if __isModule $repo ; then
		parent=$(getParentRepo $repo)
		parentDir=$(getDirForRepo $parent)
		if repolistIncludes "$parent" || [ "$parent" = "$FWMETAREPO" ]; then
			# parent is included in list, so initialize this repo as submodule
			cd $parentDir
			locRelative=${loc#$parentDir/}
			debug "Initializing submodule $repo in $locRelative"
			# in msysgit on Windows submodules use a file instead of a linked subdirectory
			if [ -e "${locRelative}/.git" ]; then
				echo -e "${_bold}Updating submodule $repo${_normal}"
			else
				echo -e "${_bold}Initializing submodule $repo${_normal}"
			fi
			git submodule init $locRelative
			git submodule update
			initialized=true
			cd "$cwd"
			if ! __isInitSubmodule "$repo"; then
				initializedRepos+=" $repo"
				return 0
			fi
		else
			# parent is not included in repolist
			if ! __isInitSubmodule "$repo"; then
				# we're told not to initialize this repo. This means we're not doing any
				# development in this repo, so we just skip it.
				return 0
			fi
			# We're told to initialize this repo, so just continue and initialize this
			# submodule as a regular repo.
		fi
	fi

	if [ "$initialized" = "false" ]; then
		echo
		if [ -d "${loc}/.git" ]; then
			echo -e "${_bold}Updating project $repo${_normal}"
		else
			echo -e "${_bold}Initializing project $repo${_normal}"
		fi
		debug "basedir in initrepo=$basedir"

		clonerepo $repo "$loc"
	fi

	# update settings for whitespace checking. If it's necessary to change the behavior for
	# certain file types we can add a line to .gitattributes, e.g.
	# *.py whitespace=-indent-with-non-tab
	git config core.whitespace "blank-at-eol,space-before-tab,indent-with-non-tab,blank-at-eof,tabwidth=4"
	git config apply.ignorewhitespace change
	git config apply.whitespace fix

	# Set CRLF conversion on Windows
	if [ "$OSTYPE" = "msys" ]; then
		git config core.autocrlf true
	fi

	# Set branch defaults
	git config branch.autosetupmerge true
	git config branch.autosetuprebase always

	# install hooks
	if [ "$reset" = "1" -o ! -f .git/hooks/commit-msg -o ! -f .git/hooks/commit-msg1_add-change-id ]; then
		echo "Installing hooks:"
		if [ \( "$reset" = "1" -a "$repo" = "fwmeta" \) -o ! -f "$basedir/.git/hooks/commit-msg1_add-change-id" ]; then
			# This is fwmeta repo. Get hook directly from Gerrit server.
			# Check if curl exists; if not try wget, otherwise use scp which requires a Gerrit
			# username
			if hash curl 2>/dev/null; then
				debug "Getting hook: curl -o .git/hooks/commit-msg1_add-change-id https://$GERRIT/tools/hooks/commit-msg"
				curl -k -o .git/hooks/commit-msg1_add-change-id https://$GERRIT/tools/hooks/commit-msg
			elif hash wget 2>/dev/null; then
				debug "Getting hook: wget --output-document=.git/hooks/commit-msg1_add-change-id https://$GERRIT/tools/hooks/commit-msg"
				wget --output-document=.git/hooks/commit-msg1_add-change-id https://$GERRIT/tools/hooks/commit-msg
			else
				debug "Getting hook: scp -p -P $GERRITPORT "$gerritusername@$GERRIT:hooks/commit-msg".git/hooks/commit-msg1_add-change-id"
				scp -p -P $GERRITPORT "$gerritusername@$GERRIT:hooks/commit-msg" .git/hooks/commit-msg1_add-change-id
			fi
			chmod +x .git/hooks/commit-msg1_add-change-id
		else
			# Other FW repos. Get hook from fwmeta.
			cp "$basedir/.git/hooks/commit-msg1_add-change-id" .git/hooks/
		fi
		cp "$basedir/fwmeta/hooks/check-commit-message" .git/hooks/commit-msg0_check-message
		cp -f "$basedir/fwmeta/hooks/pre-commit" .git/hooks/
		cp -f "$basedir/fwmeta/hooks/commit-msg" .git/hooks/
		# make it less likely that user replaces it accidentally
		chmod -w .git/hooks/pre-commit
		chmod -w .git/hooks/commit-msg
	fi

	# Set gitflow options. We no longer require git-flow to be installed since our scripts
	# manage everything, but we still use the variables.
	if ! git config --get gitflow.branch.master &>/dev/null || [ "$reset" = "1" ]; then
		git config gitflow.branch.master master
		git config gitflow.branch.develop develop
		git config gitflow.prefix.feature feature/
		git config gitflow.prefix.release release/
		git config gitflow.prefix.hotfix hotfix/
		git config gitflow.prefix.support support/
	fi

	debug "Checking alias. New: $THISALIASVERSION; have: $(git config --get fwinit.aliasversion)"

	if [ "$(git config --get fwinit.aliasversion)" != "$THISALIASVERSION"  -o "$reset" = "1" ]; then
		# adding some alias
		echo "Adding alias:"
		if ! git config --get fwinit.initialized &>/dev/null || [ "$reset" = "1" ]; then
			giteditor="$(git config --get fwinit.editor || true)"
			gitguieditor="$(git config --get fwinit.guieditor || true)"
			if [ "$(uname)" = "Linux" ]; then
				gitguieditor="${gitguieditor:-gedit -s}"
			else
				gitguieditor="${gitguieditor:-$(dirname $0)/ZEdit.exe}"
			fi
			giteditor="${giteditor:-$gitguieditor}"
			git config core.editor "$giteditor"
			git config gui.editor "$gitguieditor"
			git config merge.tool "$mergetool"
			git config diff.guitool "$mergetool"
			git config fwinit.initialized 1
		fi
		if [ "$(git config --get fwinit.aliasversion || echo -1)" -lt "2" -o "$reset" = "1" ]; then
			# Clean up old obsolete entries
			git config --remove-section "guitool.Bypass Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Start" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Finish" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Publish" 2> /dev/null || true
			git config --remove-section "guitool.Feature/Track" 2> /dev/null || true
			git config --remove-section "guitool.Release/Start" 2> /dev/null || true
			git config --remove-section "guitool.Release/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Release/Finish" 2> /dev/null || true
			git config --remove-section "guitool.Release/Publish" 2> /dev/null || true
			git config --remove-section "guitool.Release/Track" 2> /dev/null || true
			git config --remove-section "guitool.Hotfix/Start" 2> /dev/null || true
			git config --remove-section "guitool.Hotfix/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Hotfix/Finish" 2> /dev/null || true
			git config --remove-section "guitool.Support/Start" 2> /dev/null || true
			git config --remove-section "guitool.Support/Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.Support/Finish" 2> /dev/null || true
			git config --remove-section "guitool. Visual Diff" 2> /dev/null || true
		fi
		if [ "$(git config --get fwinit.aliasversion || echo -1)" -lt "8" -o "$reset" = "1" ]; then
			# More cleanup
			git config --remove-section "guitool.Interactive Rebase" 2> /dev/null || true
			git config --remove-section "guitool.Interactive Rebase (Continue)" 2> /dev/null || true
			git config --remove-section "guitool.Interactive Rebase (Abort)" 2> /dev/null || true
			git config --remove-section guitool.Rebase 2> /dev/null || true
		fi
		if [ "$(git config --get fwinit.aliasversion || echo -1)" -lt "17" -o "$reset" = "1" ]; then
			# More cleanup
			git config --unset alias.featfin 2> /dev/null || true
			git config --unset alias.hotfin 2> /dev/null || true
			git config --unset alias.supfin 2> /dev/null || true
			git config --unset alias.release 2> /dev/null || true
			git config --unset guitool.0_Feature/Publish.cmd 2> /dev/null || true
			git config --unset guitool.1_Release/Publish.cmd 2> /dev/null || true
			git config --remove-section "guitool.1_Release/0_Start" 2> /dev/null || true
			git config --remove-section "guitool.2_Hotfix/0_Start" 2> /dev/null || true
			git config --remove-section "guitool.3_Support/0_Start" 2> /dev/null || true
			git config --remove-section guitool.1_Release/2_Finish 2> /dev/null || true
			git config --remove-section guitool.2_Hotfix/2_Finish 2> /dev/null || true
			git config --remove-section guitool.3_Support/2_Finish 2> /dev/null || true
			git config --remove-section "guitool.3_Support/0_Start Bugfix" 2> /dev/null || true
			git config --remove-section "guitool.3_Support/1_Submit for Code Review" 2> /dev/null || true
			git config --remove-section "guitool.3_Support/2_Finish Bugfix" 2> /dev/null || true
		fi

		sedReplace="$basedir/$TOOLSDIR"
		sedReplace=${sedReplace//\//\\\/} # replace all / with \/
		git config alias.review '!sh -c "SEDREPLACE/review.sh \$@" -'
		git config alias.pullrebase '!sh -c "SEDREPLACE/pullrebase.sh" -'
		git config alias.mergepush '!sh -c "git mergetool -y && git commit && git push origin && git push origin --tags" -'
		git config alias.globstat '!sh -c "SEDREPLACE/repostatus \$1" -'
		git config alias.bypass '!sh -c "SEDREPLACE/bypass.sh" -'
		git config alias.track '!sh -c "SEDREPLACE/git-track \$1" -'
		git config alias.start '!sh -c "SEDREPLACE/git-start \$@" -'
		git config alias.finish '!sh -c "SEDREPLACE/git-finish \$@" -'
		# do this last so that we can replace multiple entries at once
		sed "s/SEDREPLACE/$sedReplace/g" .git/config 2>&1 > .git/config2
		mv .git/config2 .git/config

		git config guitool.0_Feature/0_Start.cmd 'git start task develop $ARGS'
		git config guitool.0_Feature/0_Start.argprompt "Feature name (JIRA number)"
		git config "guitool.0_Feature/1_Submit for Code Review.cmd" 'git review'
		git config guitool.0_Feature/2_Finish.cmd 'GIT_EDITOR=$(git config --get gui.editor) git finish task'
		git config guitool.0_Feature/Create.cmd 'git start feature $ARGS'
		git config guitool.0_Feature/Create.argprompt "Name of the long-lived feature branch (without feature/ prefix)"
		git config guitool.0_Feature/Release.cmd 'git finish feature'
		git config guitool.0_Feature/Release.title "Close shared feature branch"
		git config guitool.0_Feature/Release.argprompt "Merge the shared feature branch?"
		git config guitool.0_Feature/Track.cmd 'git track feature/$ARGS'
		git config guitool.0_Feature/Track.argprompt "Name of the feature (without feature/ prefix)"

		git config "guitool.1_Release/0_Start Bugfix.cmd" 'git start task release $ARGS'
		git config "guitool.1_Release/0_Start Bugfix.argprompt" "Bugfix name (JIRA number)"
		git config "guitool.1_Release/1_Submit for Code Review.cmd" 'git review'
		git config "guitool.1_Release/2_Finish Bugfix.cmd" 'GIT_EDITOR=$(git config --get gui.editor) git finish task'
		git config guitool.1_Release/Create.cmd 'git start release $ARGS'
		git config guitool.1_Release/Create.argprompt "Name of the upcoming release"
		git config guitool.1_Release/Release.cmd 'GIT_EDITOR=$(git config --get gui.editor) git finish release $ARGS'
		git config guitool.1_Release/Release.title "Release new version from release branch"
		git config guitool.1_Release/Release.argprompt "Name of the release"
		git config guitool.1_Release/Track.cmd 'git track release/$ARGS'
		git config guitool.1_Release/Track.argprompt "Name of the release (without release/ prefix)"

		git config "guitool.2_Hotfix/0_Start Bugfix.cmd" 'git start task hotfix $ARGS'
		git config "guitool.2_Hotfix/0_Start Bugfix.argprompt" "Bugfix name (JIRA number)"
		git config "guitool.2_Hotfix/1_Submit for Code Review.cmd" 'git review'
		git config "guitool.2_Hotfix/2_Finish Bugfix.cmd" 'GIT_EDITOR=$(git config --get gui.editor) git finish task'
		git config guitool.2_Hotfix/Create.cmd 'git start hotfix $ARGS $REVISION'
		git config guitool.2_Hotfix/Create.argprompt "Name of the upcoming hotfix release"
		git config guitool.2_Hotfix/Create.revprompt "Please select the parent branch (master or support branch)"
		git config guitool.2_Hotfix/Release.cmd 'GIT_EDITOR=$(git config --get gui.editor) git finish hotfix $ARGS $REVISION'
		git config guitool.2_Hotfix/Release.title 'Release new version from hotfix branch'
		git config guitool.2_Hotfix/Release.argprompt "Name of the hotfix release"
		git config guitool.2_Hotfix/Release.revprompt "Please select the parent branch (master or support branch)"
		git config guitool.2_Hotfix/Track.cmd 'git track hotfix/$ARGS'
		git config guitool.2_Hotfix/Track.argprompt "Name of the hotfix (without hotfix/ prefix)"

		git config guitool.3_Support/Create.cmd 'git start support $ARGS'
		git config guitool.3_Support/Create.argprompt "Name of the support branch (without support/ prefix) and tag this support branch is based on"
		git config guitool.3_Support/Track.cmd 'git track support/$ARGS'
		git config guitool.3_Support/Track.argprompt "Name of the support branch (without support/ prefix)"

		git config guitool.4_Rebase/Abort.cmd 'git rebase --abort'
		git config guitool.4_Rebase/Continue.cmd 'GIT_EDITOR=$(git config --get gui.editor) git rebase --continue'
		git config guitool.4_Rebase/Interactive.cmd 'GIT_EDITOR=$(git config --get gui.editor) git rebase -i $REVISION'
		git config guitool.4_Rebase/Interactive.revprompt yes
		git config guitool.4_Rebase/Update.cmd 'git pullrebase'

		git config "guitool.Advanced/Bypass Code Review.cmd" 'git bypass'
		git config "guitool.Visual Diff.cmd" 'git difftool -y HEAD $FILENAME'
		git config "guitool.Visual Diff.needsfile" yes
		git config "guitool.Visual Diff.noconsole" yes
		git config "guitool.Visual Merge.cmd" 'GIT_EDITOR=$(git config --get gui.editor) git mergetool -y'
		git config "guitool.Visual Merge.noconsole" yes
		git config "guitool.Visual Merge and Push.cmd" 'GIT_EDITOR=$(git config --get gui.editor) git mergepush'
		git config "guitool.Visual Merge.noconsole" yes

		git config "guitool.Global Repo Status.cmd" 'git globstat --no-colors'

		git config fwinit.aliasversion "$THISALIASVERSION"
	fi
	cd "$cwd"
	initializedRepos+=" $repo"
}

initReposFromList()
{
	for repo in $repolist; do
		if ! __isModule "$repo" && ! initializedReposIncludes "$repo"; then
			initrepo "$repo" "$(getDirForRepo $repo)" "$basedir"
		fi
	done
}

initSubmodulesFromList()
{
	for repo in $repolist; do
		if __isModule "$repo" && ! initializedReposIncludes "$repo"; then
			initrepo "$repo" "$(getDirForRepo $repo)" "$basedir"
		fi
	done
}

initInvisibleSubmodules()
{
	debug "\n\nProcessing invisible submodules:"
	for repo in $(getAllReposForPlatform --include-all); do
		if ! __isVisible "$repo" && __included "$repo" && ! initializedReposIncludes "$repo"; then
			initrepo "$repo" "$(getDirForRepo $repo)" "$basedir"
		fi
	done
}

initAllRepos()
{
	initReposFromList
	initSubmodulesFromList
	initInvisibleSubmodules
}

basedir="${basedir:-$(getfwmetadirBootStrap)}"
# On Windows we want to use getopt in our directory since the other one
# is broken
if [ "$OSTYPE" = "msys" ]; then
	GETOPT="$basedir/$TOOLSDIR/getopt"
else
	GETOPT="getopt"
fi

ORIG_ARGS=("$@")
OPTS=$($GETOPT -o hvrm --long help --long debug --long recursive --long reset --long modify \
	--long version --long shallow --long basedir: --long running-tests -n "$(basename "$0")" -- "$@")

eval set -- "$OPTS"

while true ; do
	case "$1" in
		-h|--help) help ; exit 0;;
		--debug) DEBUG=1 ;;
		--recursive) RECURSIVE=1 ;;
		-v|--version) showVersion ; exit 0;;
		-r|--reset) reset=1 ;;
		-m|--modify) modify=1 ;;
		--shallow) shallow='--depth=1' ;;
		--basedir) basedir=$2 ; shift ;;
		--running-tests) return 0;;
		--) shift; break;;
		*) echo "Internal error: Unknown argument: $1" ; exit 1 ;;
	esac
	shift
done
debug "***************\nARGS=${ORIG_ARGS[@]}"

defaultbranches="master develop release/* support/*"

orig_dir="$(pwd)"
debug "basedir=$basedir, originally: $orig_dir"
tmpdir=${TMPDIR-/tmp}/fwmeta-$$
SRC="$0"
DST="$tmpdir/$(basename "$0")"

. "$basedir/$TOOLSDIR/functions.sh"

cd "$basedir"
if [ ! $RECURSIVE ]; then
	branchlist="$defaultbranches"
	debug "Called non-recursive"

	# We can't directly call "git pull origin master" since initrepo is
	# locked on Windows. Instead we copy the initrepo script to a
	# temporary directory and call it there to do the update and then
	# do the recursive call so that we run with the latest version
	# of initrepo.
	if [ "$SRC" != "$DST" ] ; then
		cd "$orig_dir"
		debug "Copying script to temp directory: $tmpdir"
		mkdir -p "$tmpdir"
		cp "$SRC" "$DST"
		cp "$(dirname "$0")/defs.sh" "$tmpdir"
		exec "$DST" --basedir "$basedir" "${ORIG_ARGS[@]}"
	else
		debug "Executing script in temp directory: $tmpdir"
		if [ -d ".git" ] && git remote | grep -q origin ; then
			git fetch origin || echo "Continuing anyway..." >&2
			# see http://stackoverflow.com/a/2659808
			if __isDirty ; then
				echo "WARNING: You have a dirty working directory - not updating $FWMETAREPO"
			else
				# fwmeta repo exists. Let's see if we're on a branch
				# that has a tracking-branch. If we are then update the
				# repo, otherwise assume we're in the middle of
				# developing some changes, so we leave it alone.
				if git rev-parse --abbrev-ref --symbolic-full-name @{u} &> /dev/null; then
					echo "Updating $FWMETAREPO"
					git rebase @{u}
				fi
			fi
		else
			# fwmeta repo doesn't exist yet. Clone it.
			echo "Cloning $FWMETAREPO"
			clonerepo "$FWMETAREPO" "$FWMETAREPO"

			basedir="$basedir/$FWMETAREPO"
			cd "$basedir"
			echo
		fi
		# recursive call so that we run with the latest version
		exec "$TOOLSDIR/$(basename "$0")" --recursive "${ORIG_ARGS[@]}"
	fi
fi
debug "Called recursively"
echo "$(basename "$0") $(git describe --dirty)"

# delete temporary directory we created for the initrepo script while updating the repo
if [ -n $tmpdir ]; then
	rm -rf $tmpdir
fi

# Sanity checks
gerritusername=$(git config --get fwinit.gerrituser) || true
username=$(git config --get user.name) || true
useremail=$(git config --get user.email) || true
mergetool=$(git config --get merge.tool) || true
mergetool=${mergetool:-p4merge}

savevalues=false

# Query user for variables
if [ -z "$username" -o "$reset" = 1 ]; then
	username="${username:-$(fullname)}"
	username=$(readdefault "Full name" "$username")
	savevalues=true
fi
# Convert username to lowercase and replace spaces with underscore
# Note: we can't use ${username,,} to convert to lowercase because that's a bash 4.0 feature
# and so doesn't work on Windows
defname="$(echo ${username// /_} | tr '[A-Z]' '[a-z]')"
if [ -z "$useremail" -o "$reset" = 1 ]; then
	useremail="${useremail:-$defname@sil.org}"
	useremail=$(readdefault "Email address" "$useremail")
	savevalues=true
fi
if [ -z "$gerritusername" -o "$reset" = 1 ]; then
	gerritusername="${gerritusername:-$defname}"
	gerritusername=$(readdefault "Gerrit username" "${gerritusername}")
	savevalues=true
fi

if "$savevalues"; then
	# Store variables for later use
	git config --global user.name "$username"
	git config --global user.email "$useremail"
	git config --global fwinit.gerrituser "$gerritusername"
fi

if [ -z "$mergetool" -o "$reset" = 1 ]; then
	mergetool=$(readdefault "Merge tool [p4merge, kdiff3]" "$mergetool")
fi

repolist=$(git config --get fwinit.repolist) || true
repolist_orig=$repolist
[ "$reset" = 1 ] && repolist_orig=""
[ "$reset" = 1 -o "$modify" = 1 ] && repolist=""
if [ -z "$repolist" ]; then
	while [ -z "$repolist" ]
	do
		echo -e "${_bold}Available repos:${_normal} $(getAllReposForPlatform)"
		defaultlist="FieldWorks FwSampleProjects"
		if [ "$(platform)" = "Linux" ]; then
			defaultlist+=" mono mono-basic mono-calgary gtk-sharp libgdiplus libcom"
		fi
		if [ "$modify" = 1 ]; then
			echo -e "${_bold}Default repos:${_normal} $defaultlist"
			defaultlist=$repolist_orig
		fi
		repolist=$(readdefault "Repos to clone" "$defaultlist")
		for repo in $repolist; do
			if ! echo "$(getAllRepos)" | grep -E "(^| )$repo( |$)" >& /dev/null; then
				echo
				printf "${_bold}Can't find \"%q\". Please try again.${_normal}\n" $repo
				repolist=""
				break
			fi
		done
	done;

	git config fwinit.repolist "$repolist"
fi
branchlist=$(git config --get fwinit.branchlist) || true
branchlist_orig=$branchlist
[ "$reset" = 1 ] && branchlist_orig=""
[ "$reset" = 1 -o "$modify" = 1 ] && branchlist=""
if [ -z "$branchlist" ]; then
	if [ "$modify" = 1 ]; then
		echo -e "${_bold}Default branches:${_normal} $defaultbranches"
		defaultbranches=$branchlist_orig
	fi
	branchlist=$(readdefault "Branches to fetch" "$defaultbranches")
	git config fwinit.branchlist "$branchlist"
fi

initializedRepos=""
initrepo $FWMETAREPO . "$basedir"

initAllRepos
