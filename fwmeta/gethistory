#!/bin/bash
# Get ancient history from git repo with older commits and splice it with the current history

set -e

GERRIT="gerrit.lsdev.sil.org"
GERRITPORT=59418
FWMETAREPO=fwmeta
TOOLSDIR=fwmeta

# Display help
help()
{
echo -e "${_bold}Usage:${_normal}\
\n    $(basename "$0") [options]

${_bold}Description:${_normal}\
\n    Gets the older history for the git repos belonging to\
\n    FieldWorks and ties them into the current history. This\
\n    makes it possible to look at the entire history of the\
\n    FieldWorks project.
\n    The script will ask for which repos and which branches it\
\n    should get the older history.

${_bold}Options:${_normal}\
\n    -h,--help\
\n         Display this help screen.
\n    -v,--version\
\n         Display the version number.
\n    --alternate-url <url>\
\n         The base of an alternate URL that will be used to\
\n         fetch the older history in addition to fetching from\
\n         $GERRIT. The name of the repo will be\
\n         appended to the URL specified here. Any URL that\
\n         is acceptable to git fetch can be used.
\n    --debug\
\n         Output debug information.

${_bold}Examples:${_normal}\
\n         $ gethistory --alternate-url /c/antique-repos\
\n    will fetch FieldWorks from /c/antique-repos/FieldWorks-antique.git.

${_bold}Note:${_normal}\
\n    It is not necessary that all repos exist under the\
\n    alternate URL location."
}

# Display version number
showVersion()
{
	echo "$(basename "$0") $(git describe --dirty)"
}

debug()
{
	[ $DEBUG ] && echo -e "$@"
	return 0
}

addHistory()
{
	local repo branches repodir olddir
	repo=$1
	branches=$2
	repodir=$3

	echo -e "${_bold}Processing $repo${_normal}"

	# Test if there is a $repo-antique repository. We query for a non-existing branch which will
	# succeed if the repo exists, but will keep response time short.
	if ! git ls-remote git://$GERRIT/$repo-antique.git nonexistant 2> /dev/null; then
		echo "$repo doesn't have a parallel repo with old history."
		return
	fi

	olddir="$(pwd)"
	cd "$repodir"
	git fetch origin refs/notes/git-p4:refs/notes/git-p4
	if ! git remote | grep -q antique; then
		git remote add antique git://$GERRIT/$repo-antique.git
	fi
	if [ -n "$ALTERNATE_URL" ]; then
		if [ $(git ls-remote $ALTERNATE_URL/${repo}-antique.git refs/notes/git-p4 2>/dev/null | wc -l) -gt 0 ]; then
			debug "Fetching git-p4 notes from $ALTERNATE_URL/${repo}-antique.git"
			git fetch $ALTERNATE_URL/${repo}-antique.git refs/notes/git-p4:refs/notes/git-p4-antique
		fi
	fi
	debug "Fetching git-p4 notes for ${repo}-antique.git from antique"
	git fetch antique refs/notes/git-p4:refs/notes/git-p4-antique
	for branch in $branches; do
		echo "Getting history for $branch"
		if ! git branch -r | grep -q "origin/${branch}$"; then
			echo "Can't find branch origin/$branch - skipping."
			continue
		fi

		if ! git branch -r | grep -q "antique/${branch}$"; then
			if [ $(git ls-remote antique $branch | wc -l) -gt 0 ]; then
				if [ -n "$ALTERNATE_URL" ]; then
					if [ $(git ls-remote $ALTERNATE_URL/${repo}-antique.git $branch 2>/dev/null | wc -l) -gt 0 ]; then
						debug "Fetching $branch from $ALTERNATE_URL/${repo}-antique.git"
						git fetch $ALTERNATE_URL/${repo}-antique.git refs/heads/$branch:refs/remotes/antique/$branch
					fi
				fi
				debug "Fetching $branch from antique"
				git fetch antique refs/heads/$branch:refs/remotes/antique/$branch
				for sha in $(git rev-list --max-parents=0 origin/$branch); do
					git replace $sha antique/$branch
				done
			else
				echo "Branch $branch doesn't exist in antique repo - skipping"
			fi
		else
			echo "Branch $branch was downloaded before - skipping"
		fi
	done
	cd "$olddir"
}

olddir="$(pwd)"
cd "$(dirname "$0")"
basedir=$(git rev-parse --show-toplevel)
cd "$basedir"

. "$basedir/$TOOLSDIR/functions.sh"

ORIG_ARGS=("$@")
OPTS=$(getopt -o hv --long help --long debug --long version --long alternate-url: -n "$(basename "$0")" -- "$@")

eval set -- "$OPTS"

while true ; do
	case "$1" in
		--alternate-url) ALTERNATE_URL=$2 ; shift ;;
		-h|--help) help ; exit 0;;
		--debug) DEBUG=1 ;;
		-v|--version) showVersion ; exit 0;;
		--) shift; break;;
		*) echo "Internal error: Unknown argument: $1" ; exit 1 ;;
	esac
	shift
done

debug "basedir=$basedir"
debug "ARGS=$@"

defaultbranches="master develop"

defaultlist=$(git config --get fwinit.repolist) || true
if [ -z "$defaultlist" ]; then
	echo "Cant't find list of installed git repos. Please run initrepo first!"
	exit 1
fi
while [ -z "$repolist" ]
do
	echo -e "${_bold}Available repos:${_normal} $(getAllReposForPlatform)"
	repolist=$(readdefault "Repos to get history for" "$defaultlist")
	for repo in $repolist; do
		if ! echo "$(getAllReposForPlatform)" | grep -E "(^| )$repo( |$)" >& /dev/null; then
			echo
			printf "${_bold}Can't find \"%q\". Please try again.${_normal}\n" $repo
			repolist=""
			break
		fi
	done
done;

branchlist=$(git config --get fwinit.branchlist) || true
branchlist=${branchlist:-$defaultbranches}
branchlist=$(readdefault "Branches to fetch" "$branchlist")

for repo in $repolist; do
	repodir=$(getDirForRepo $repo)
	if [ ! -d "$repodir" ]; then
		echo "Can't find repo $repo. Please run initrepo first!"
		exit 2
	fi
	addHistory $repo "$branchlist" "$repodir"
done
